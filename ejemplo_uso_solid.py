# ============================================================================
# EJEMPLO DE USO DE IMPLEMENTACIONES SOLID
# ============================================================================
"""
Este archivo demuestra c√≥mo usar las nuevas implementaciones SOLID
en lugar de las versiones legacy.

BENEFICIOS DE LA ARQUITECTURA SOLID:
- Testeo m√°s f√°cil (inyecci√≥n de dependencias)
- Mantenimiento simplificado (responsabilidades separadas)
- Extensibilidad sin modificar c√≥digo existente
- C√≥digo m√°s legible y comprensible
"""

from servicios_solid import (
    FactoriaServiciosProduccion,
    ComandoCrearUsuario,
    ManejadorComandos
)


def ejemplo_autenticacion_solid():
    """
    Ejemplo de c√≥mo usar el servicio de autenticaci√≥n SOLID.
    
    BENEFICIOS SOLID DEMOSTRADOS:
    - DIP: Todas las dependencias se inyectan autom√°ticamente
    - SRP: Cada componente tiene una sola responsabilidad
    - OCP: Extensible sin modificar c√≥digo existente
    """
    
    # Factory crea todas las dependencias necesarias (DIP)
    servicio_auth = FactoriaServiciosProduccion.crear_servicio_autenticacion()
    
    # Autenticar usuario usando el servicio SOLID
    usuario = servicio_auth.autenticar("12345678", "password123")
    
    if usuario:
        print(f"‚úì Usuario autenticado: {usuario.nombre}")
        return usuario
    else:
        print("‚úó Autenticaci√≥n fallida")
        return None


def ejemplo_creacion_usuario_solid():
    """
    Ejemplo de c√≥mo crear usuarios usando Command Pattern.
    
    BENEFICIOS SOLID DEMOSTRADOS:
    - SRP: Comando encapsula solo la l√≥gica de creaci√≥n
    - OCP: Nuevos comandos se pueden agregar sin modificar el manejador
    - DIP: Comando depende de abstracciones, no de implementaciones
    """
    
    # Crear dependencias usando Factory (DIP)
    servicio_auth = FactoriaServiciosProduccion.crear_servicio_autenticacion()
    manejador = FactoriaServiciosProduccion.crear_manejador_comandos()
    
    # Datos del usuario a crear
    datos_usuario = {
        'nombre': 'Dr. Juan P√©rez',
        'rol': 'PROFESIONAL',
        'dni': '12345678',
        'password': 'password123'
    }
    
    # Crear comando espec√≠fico (SRP)
    comando = ComandoCrearUsuario(datos_usuario, servicio_auth)
    
    try:
        # Ejecutar comando usando el manejador (OCP)
        usuario_creado = manejador.manejar(comando)
        print(f"‚úì Usuario creado exitosamente: {usuario_creado.nombre}")
        return usuario_creado
        
    except Exception as e:
        print(f"‚úó Error creando usuario: {e}")
        return None


def ejemplo_autorizacion_solid():
    """
    Ejemplo de c√≥mo usar el servicio de autorizaci√≥n.
    
    BENEFICIOS SOLID DEMOSTRADOS:
    - SRP: Servicio se enfoca solo en autorizaci√≥n
    - OCP: Nuevos permisos se pueden agregar sin modificar c√≥digo
    """
    
    # Crear servicio de autorizaci√≥n
    servicio_autorizacion = FactoriaServiciosProduccion.crear_servicio_autorizacion()
    
    # Primero necesitamos un usuario autenticado
    usuario = ejemplo_autenticacion_solid()
    
    if usuario:
        # Verificar permisos espec√≠ficos
        puede_crear_usuarios = servicio_autorizacion.tiene_permiso(
            usuario, 'usuarios', 'crear'
        )
        puede_ver_reportes = servicio_autorizacion.tiene_permiso(
            usuario, 'reportes', 'leer'
        )
        
        print(f"Usuario {usuario.nombre}:")
        print(f"  ‚úì Puede crear usuarios: {puede_crear_usuarios}")
        print(f"  ‚úì Puede ver reportes: {puede_ver_reportes}")
        
        return {
            'puede_crear_usuarios': puede_crear_usuarios,
            'puede_ver_reportes': puede_ver_reportes
        }
    
    return None


def ejemplo_testing_solid():
    """
    Ejemplo de c√≥mo el dise√±o SOLID facilita el testing.
    
    BENEFICIOS PARA TESTING:
    - DIP: Se pueden inyectar mocks de dependencias
    - SRP: Cada componente se puede testear aisladamente
    - ISP: Interfaces peque√±as f√°ciles de mockear
    """
    
    # En un test real, podr√≠amos crear mocks:
    # mock_repositorio = Mock(spec=IRepositorioUsuario)
    # mock_hasheador = Mock(spec=IHasheadorPassword)
    # mock_validador = Mock(spec=IValidadorUsuario)
    # mock_notificador = Mock(spec=INotificadorEventos)
    
    # servicio_auth = ServicioAutenticacionSOLID(
    #     mock_repositorio, mock_hasheador, mock_validador, mock_notificador
    # )
    
    print("‚úì Dise√±o SOLID permite testing f√°cil con mocks")
    print("  - Cada dependencia se puede simular independientemente")
    print("  - Tests m√°s r√°pidos (no requieren base de datos)")
    print("  - Tests m√°s confiables (resultados predecibles)")


def comparacion_legacy_vs_solid():
    """
    Comparaci√≥n entre implementaci√≥n legacy y SOLID.
    """
    
    print("\n" + "="*60)
    print("COMPARACI√ìN: LEGACY vs SOLID")
    print("="*60)
    
    print("\nüî¥ IMPLEMENTACI√ìN LEGACY (servicios.py):")
    print("  ‚úó M√∫ltiples responsabilidades en una clase")
    print("  ‚úó Dependencias hardcodeadas (Werkzeug, SQLAlchemy)")
    print("  ‚úó Dif√≠cil de testear")
    print("  ‚úó Dif√≠cil de extender")
    print("  ‚úó Acoplamiento alto")
    
    print("\nüü¢ IMPLEMENTACI√ìN SOLID (servicios_solid.py):")
    print("  ‚úì Una responsabilidad por clase")
    print("  ‚úì Dependencias inyectadas")
    print("  ‚úì F√°cil de testear con mocks")
    print("  ‚úì Extensible sin modificar c√≥digo existente")
    print("  ‚úì Bajo acoplamiento")
    
    print("\nüìã PRINCIPIOS APLICADOS:")
    print("  ‚úì SRP: Clases con responsabilidad √∫nica")
    print("  ‚úì OCP: Abierto para extensi√≥n, cerrado para modificaci√≥n")
    print("  ‚úì LSP: Implementaciones intercambiables")
    print("  ‚úì ISP: Interfaces espec√≠ficas y cohesivas")
    print("  ‚úì DIP: Dependencias hacia abstracciones")


if __name__ == "__main__":
    """
    Ejecutar todos los ejemplos para demostrar la arquitectura SOLID.
    """
    
    print("üöÄ DEMOSTRACI√ìN DE ARQUITECTURA SOLID")
    print("="*50)
    
    # Ejemplo 1: Autenticaci√≥n
    print("\n1Ô∏è‚É£ EJEMPLO DE AUTENTICACI√ìN:")
    ejemplo_autenticacion_solid()
    
    # Ejemplo 2: Creaci√≥n de usuario con Command Pattern
    print("\n2Ô∏è‚É£ EJEMPLO DE CREACI√ìN DE USUARIO (Command Pattern):")
    ejemplo_creacion_usuario_solid()
    
    # Ejemplo 3: Autorizaci√≥n
    print("\n3Ô∏è‚É£ EJEMPLO DE AUTORIZACI√ìN:")
    ejemplo_autorizacion_solid()
    
    # Ejemplo 4: Testing
    print("\n4Ô∏è‚É£ EJEMPLO DE TESTING:")
    ejemplo_testing_solid()
    
    # Comparaci√≥n
    comparacion_legacy_vs_solid()
    
    print("\n" + "="*60)
    print("‚úÖ DEMOSTRACI√ìN COMPLETADA")
    print("Para usar en producci√≥n, reemplazar gradualmente")
    print("servicios legacy con implementaciones SOLID.")
    print("="*60)